{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","example","exampleArray","inputField","calculationResult","operator","runningTotal","runningTotalArray","firstCalcNumber","input","this","setState","concat","runningTotalArrayConvert","length","clearRunningTotal","runningTotalString","join","runningTotalNumber","parseInt","Container","Card","Body","className","class","id","Button","onClick","concatenateInput","operatorButton","clearButton","equals","Row","Col","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.02bb3d07.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      example: \"pony\",\n      exampleArray: [],\n      inputField: 0,\n      calculationResult: [],\n      operator: \" \",\n      runningTotal: 0,\n      runningTotalArray: [],\n      firstCalcNumber: []\n    }\n  }\n\n  concatenateInput(input) {\n    this.setState((state) => ({\n      runningTotalArray: state.runningTotalArray.concat(input)\n    }))\n    this.runningTotalArrayConvert();\n  }\n  \n\n  operatorButton(input) {\n    if (this.state.runningTotalArray && this.state.runningTotalArray.length){\n    this.runningTotalArrayConvert();\n    this.setState((state) => ({\n    operator: state.operator = input,\n    firstCalcNumber: state.firstCalcNumber = state.runningTotal,\n    }))\n    this.clearRunningTotal()\n  }\n  }\n\n  calculateResult() {\n    this.setState((state) => ({\n      calculationResult: state.calculationResult + state.inputField\n    }))\n  }\n\n  addRunningTotalArray() {\n    this.setState((state) => ({\n      calculationResult: state.calculationResult + state.runningTotalArray\n    }))\n  }\n\n  runningTotalArrayConvert() {\n    let array = this.state.runningTotalArray;\n    let runningTotalString = array.join('');\n    let runningTotalNumber = parseInt(runningTotalString);\n    this.setState((state) => ({\n      runningTotal: state.runningTotal = runningTotalNumber\n    }\n    ))\n  }\n\n  addRunningTotal() {\n    this.runningTotalArrayConvert();\n    this.setState((state) => ({\n      calculationResult: state.calculationResult + state.runningTotal\n    }));\n    this.clearRunningTotal();\n  }\n\n  equals() {\n    let operator = this.state.operator;\n    this.runningTotalArrayConvert();\n    if (this.state.runningTotalArray && this.state.runningTotalArray.length)\n    if (operator === \" \"){\n      this.setState((state) => ({\n        calculationResult: state.runningTotal\n      }));\n    }\n    if (this.state.firstCalcNumber !== 0){\n    if (operator === \"+\") {\n      this.setState((state) => ({\n        calculationResult: state.firstCalcNumber + state.runningTotal\n      }));\n    }\n    if (operator === \"-\") {\n      this.setState((state) => ({\n        calculationResult: state.firstCalcNumber - state.runningTotal\n      }));\n    }\n    if (operator === \"x\") {\n      this.setState((state) => ({\n        calculationResult: state.firstCalcNumber * state.runningTotal\n      }));\n    }\n    if (operator === \"/\") {\n      this.setState((state) => ({\n        calculationResult: state.firstCalcNumber / state.runningTotal\n      }));\n    }\n    this.setState((state) => ({\n      firstCalcNumber: []\n    }));\n  }\n    else{\n    if (this.runningTotal !== 0) {\n      if (operator === \"+\") {\n        this.setState((state) => ({\n          calculationResult: state.calculationResult + state.runningTotal\n        }));\n      }\n      if (operator === \"-\") {\n        this.setState((state) => ({\n          calculationResult: state.calculationResult - state.runningTotal\n        }));\n      }\n      if (operator === \"x\") {\n        this.setState((state) => ({\n          calculationResult: state.calculationResult * state.runningTotal\n        }));\n      }\n      if (operator === \"/\") {\n        this.setState((state) => ({\n          calculationResult: state.calculationResult / state.runningTotal\n        }));\n      }\n    }\n    }\n    this.clearRunningTotal();\n    this.setState((state) => ({\n      operator: \" \"\n    }))\n  }\n\n\n  clearRunningTotal() {\n    this.setState((state) => ({\n      runningTotalArray: state.runningTotalArray = [],\n      runningTotal: state.runningTotal = [],\n    }))\n  }\n\n  clearButton() {\n    this.clearRunningTotal()\n    this.setState((state) => ({\n      operator: state.operator = \" \",\n      calculationResult: state.calculationResult = \"\",\n      firstCalcNumber: []\n    }))\n  }\n\n\n  render() {\n    return (\n      <>\n      <Container>\n        <Card>\n      <Card.Body className=\"border border-dark\">\n      <div class=\"border border-dark rounded text-center\">\n          Calculator\n        </div> <br></br>\n        {/*{this.state.example} <br></br>*/}\n        <br></br>\n        <br></br>\n        <div id=\"buttons\" className=\"text-center\">\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(7)}>\n          7\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(8)}>\n          8\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(9)}>\n          9\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.operatorButton(\"+\")}>\n          +\n        </Button>\n        <br></br>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(4)}>\n          4\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(5)}>\n          5\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(6)}>\n          6\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.operatorButton(\"-\")}>\n          -\n        </Button>\n        <br></br>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(1)}>\n          1\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(2)}>\n          2\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(3)}>\n          3\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.operatorButton(\"x\")}>\n          x\n        </Button>\n        <br></br>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.clearButton()}>\n          C\n        </Button>\n        \n        <Button className=\"border border-dark equals-button\" onClick={() => this.equals()}>\n          Equals\n        </Button>\n        <Button className=\"border border-dark number-buttons\" onClick={() => this.operatorButton(\"/\")}>\n          /\n        </Button>\n        </div>\n        \n        <div id=\"box-div-container\" className=\"d-flex justify-content-center\">\n\n        <div id=\"box-div\" className=\"text-center\">\n          \n        <div id=\"box-row-1\" className=\"\">\n        <Row >\n        \n        <Col>\n        <div id=\"input\" className=\"boxes\">\n        <br></br>\n        {this.state.runningTotalArray}\n        </div>\n        </Col>\n   \n        <Col>\n        <div id =\"operator\" className=\"boxes\">\n        <br></br>\n        {this.state.operator}\n        </div>\n        </Col>\n        </Row>\n        </div>\n\n        <div id=\"box-row-2\">\n        <Row >\n        <Col>\n        <div id=\"stored-number\" className=\"boxes\">\n          <br></br>\n        {this.state.firstCalcNumber}\n        </div>\n        </Col>\n                \n        <Col>\n        <div id=\"result\" className=\"boxes\">\n        <br></br>\n        {this.state.calculationResult}\n        </div>\n        </Col>\n\n        </Row>\n        </div>\n        </div>\n\n        </div>\n        </Card.Body>\n        \n        </Card>\n        \n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}