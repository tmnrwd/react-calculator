{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","example","exampleArray","inputField","calculationResult","operator","runningTotal","runningTotalArray","firstCalcNumber","noNumberSupplied","input","this","setState","concat","runningTotalArrayConvert","length","clearRunningTotal","runningTotalString","join","runningTotalNumber","parseFloat","console","log","equalsNoFirstCalc","equals","Container","Card","Body","className","id","Button","onClick","concatenateInput","operatorButton","clearButton","decideEquals","Row","Col","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2bdd169.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      example: \"pony\",\n      exampleArray: [],\n      inputField: 0,\n      calculationResult: 0,\n      operator: \" \",\n      runningTotal: 0,\n      runningTotalArray: [],\n      firstCalcNumber: 0,\n      noNumberSupplied: false,\n    }\n  }\n\n  concatenateInput(input) {\n    this.setState((state) => ({\n      runningTotalArray: state.runningTotalArray.concat(input)\n    }))\n    this.runningTotalArrayConvert();\n  }\n\n\n  operatorButton(input) {\n    this.setState((state) => ({\n      operator: state.operator = input,\n    }))\n    if (this.state.runningTotalArray && this.state.runningTotalArray.length && this.state.firstCalcNumber) {\n      this.runningTotalArrayConvert();\n      this.setState((state) => ({\n        firstCalcNumber: state.firstCalcNumber + state.runningTotal,\n      }))\n    }\n    else if (this.state.runningTotalArray && this.state.runningTotalArray.length) {\n      this.runningTotalArrayConvert();\n      this.setState((state) => ({\n        firstCalcNumber: state.runningTotal,\n      }))\n\n    }\n    this.clearRunningTotal()\n\n  }\n\n  calculateResult() {\n    this.setState((state) => ({\n      calculationResult: state.calculationResult + state.inputField\n    }))\n  }\n\n  addRunningTotalArray() {\n    this.setState((state) => ({\n      calculationResult: state.calculationResult + state.runningTotalArray\n    }))\n  }\n\n  runningTotalArrayConvert() {\n    let array = this.state.runningTotalArray;\n    let runningTotalString = array.join('');\n    let runningTotalNumber = parseFloat(runningTotalString);\n    this.setState((state) => ({\n      runningTotal: state.runningTotal = runningTotalNumber\n    }\n    ))\n  }\n\n  addRunningTotal() {\n    this.runningTotalArrayConvert();\n    this.setState((state) => ({\n      calculationResult: state.calculationResult + state.runningTotal\n    }));\n    this.clearRunningTotal();\n  }\n\n  decideEquals() {\n    console.log(\"firstCalcNumber, on calling decideEquals:\", this.state.firstCalcNumber)\n    console.log(\"operator, on calling decideEquals:\", this.state.operator)\n    if (this.state.firstCalcNumber === 0) {\n      console.log(\"trig noFirstCalc\")\n      this.equalsNoFirstCalc();\n    }\n    else {\n      console.log(\"trig else\")\n      this.equals();\n    }\n    this.setState((state) => ({\n      noNumberSupplied: false\n    }));\n  }\n\n  equalsNoFirstCalc() {\n    let operator = this.state.operator;\n    console.log(\"operator = \", operator)\n    this.runningTotalArrayConvert();\n\n    if (operator === \" \") {\n      this.setState((state) => ({\n        calculationResult: state.runningTotal\n      }));\n    }\n    if (operator === \"+\") {\n      this.setState((state) => ({\n        calculationResult: state.calculationResult + state.runningTotal\n      }));\n    }\n    if (operator === \"-\") {\n      this.setState((state) => ({\n        calculationResult: state.calculationResult - state.runningTotal\n      }));\n    }\n    if (operator === \"x\") {\n      this.setState((state) => ({\n        calculationResult: state.calculationResult * state.runningTotal\n      }));\n    }\n    if (operator === \"/\") {\n      this.setState((state) => ({\n        calculationResult: state.calculationResult / state.runningTotal\n      }));\n    }\n    this.clearRunningTotal();\n    this.setState((state) => ({\n      operator: \" \"\n    }))\n  }\n\n  equals() {\n    let operator = this.state.operator;\n    console.log(\"operator = \", operator)\n    this.runningTotalArrayConvert();\n\n    if (operator === \" \") {\n      this.setState((state) => ({\n        calculationResult: state.runningTotal\n      }));\n    }\n    if (this.state.firstCalcNumber !== 0) {\n      if (operator === \"+\") {\n        this.setState((state) => ({\n          calculationResult: state.firstCalcNumber + state.runningTotal\n        }));\n      }\n      if (operator === \"-\") {\n        this.setState((state) => ({\n          calculationResult: state.firstCalcNumber - state.runningTotal\n        }));\n      }\n      if (operator === \"x\") {\n        this.setState((state) => ({\n          calculationResult: state.firstCalcNumber * state.runningTotal\n        }));\n      }\n      if (operator === \"/\") {\n        this.setState((state) => ({\n          calculationResult: state.firstCalcNumber / state.runningTotal\n        }));\n      }\n      this.setState((state) => ({\n        firstCalcNumber: 0\n      }));\n    }\n    else {\n      if (this.runningTotal !== 0) {\n        if (operator === \"+\") {\n          this.setState((state) => ({\n            calculationResult: state.calculationResult + state.runningTotal\n          }));\n        }\n        if (operator === \"-\") {\n          this.setState((state) => ({\n            calculationResult: state.calculationResult - state.runningTotal\n          }));\n        }\n        if (operator === \"x\") {\n          this.setState((state) => ({\n            calculationResult: state.calculationResult * state.runningTotal\n          }));\n        }\n        if (operator === \"/\") {\n          this.setState((state) => ({\n            calculationResult: state.calculationResult / state.runningTotal\n          }));\n        }\n      }\n    }\n    this.clearRunningTotal();\n    this.setState((state) => ({\n      operator: \" \"\n    }))\n  }\n\n\n  clearRunningTotal() {\n    this.setState((state) => ({\n      runningTotalArray: [],\n      runningTotal: state.runningTotal = 0,\n    }))\n  }\n\n  clearButton() {\n    this.clearRunningTotal()\n    this.setState((state) => ({\n      operator: state.operator = \" \",\n      calculationResult: state.calculationResult = \"\",\n      firstCalcNumber: 0\n    }))\n  }\n\n\n  render() {\n    return (\n      <>\n        <Container>\n          <Card>\n            <Card.Body className=\"border border-dark\">\n              <div className=\"border border-dark rounded text-center\">\n                Calculator\n        </div> <br></br>\n              {/*{this.state.example} <br></br>*/}\n              <br></br>\n              <br></br>\n              <div id=\"buttons\" className=\"text-center\">\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(7)}>\n                  7\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(8)}>\n                  8\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(9)}>\n                  9\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.operatorButton(\"+\")}>\n                  +\n        </Button>\n                <br></br>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(4)}>\n                  4\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(5)}>\n                  5\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(6)}>\n                  6\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.operatorButton(\"-\")}>\n                  -\n        </Button>\n                <br></br>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(1)}>\n                  1\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(2)}>\n                  2\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(3)}>\n                  3\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.operatorButton(\"x\")}>\n                  x\n        </Button>\n                <br></br>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.clearButton()}>\n                  C\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(0)}>\n                  0\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.concatenateInput(\".\")}>\n                  .\n        </Button>\n                <Button className=\"border border-dark number-buttons\" onClick={() => this.operatorButton(\"/\")}>\n                  /\n        </Button>\n        <br></br>\n                <Button className=\"border border-dark equals-button\" onClick={() => this.decideEquals()}>\n                  =\n        </Button>\n              </div>\n\n              <div id=\"box-div-container\" className=\"d-flex justify-content-center\">\n\n                <div id=\"box-div\" className=\"text-center\">\n\n                  <div id=\"box-row-1\" className=\"\">\n                    <Row >\n\n                      <Col>\n                        <div id=\"input\" className=\"boxes\">\n                          <br></br>\n                          {this.state.runningTotalArray}\n                        </div>\n                      </Col>\n\n                      <Col>\n                      <div id=\"stored-number\" className=\"boxes\">\n                          <br></br>\n                          {this.state.firstCalcNumber}\n                        </div>\n                      </Col>\n                    </Row>\n                  </div>\n\n                  <div id=\"box-row-2\">\n                    <Row >\n                      <Col>\n                      <div id=\"operator\" className=\"boxes\">\n                          <br></br>\n                          {this.state.operator}\n                        </div>\n                        \n                      </Col>\n\n                      <Col>\n                        <div id=\"result\" className=\"boxes\">\n                          <br></br>\n                          {this.state.calculationResult}\n                        </div>\n                      </Col>\n\n                    </Row>\n                  </div>\n                </div>\n\n              </div>\n            </Card.Body>\n\n          </Card>\n\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}